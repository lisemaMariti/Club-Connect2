/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package clubconnect.ui;

import clubconnect.dao.ClubDAO;
import clubconnect.models.Club;
import clubconnect.models.User;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.util.List;

public class ClubForm extends javax.swing.JFrame {
    
 private User user;
private boolean isAdmin = false;

/**
 * Creates new form ClubForm
 */

// ---------- Constructor for Admin ----------
public ClubForm() {
    initComponents();
    setLocationRelativeTo(null);
    setTitle("Club Management - Admin");
    isAdmin = true;

    // ✅ Hide leader-only components
    txtLeaderId.setVisible(false);
    txtName.setVisible(false);
    txtDescription.setVisible(false);
    btnCreate.setVisible(false);

    // ✅ Show admin-only components
    btnApprove.setVisible(true);
    btnReject.setVisible(true);
    cbStatusFilter.setVisible(true);

    // ✅ Load all clubs
    loadClubs("ALL");

    // ✅ Ensure UI refresh (important for NetBeans forms)
    SwingUtilities.invokeLater(() -> {
        revalidate();
        repaint();
    });
}

// ---------- Constructor for Leader ----------
public ClubForm(User user) {
    initComponents();
    this.user = user;
    setLocationRelativeTo(null);
    setTitle("Create Club - " + user.getName());
    isAdmin = false;

    // ✅ Leader setup
    txtLeaderId.setText(String.valueOf(user.getUserId()));
    txtLeaderId.setEditable(false);

    // ✅ Hide admin-only components
    btnApprove.setVisible(false);
    btnReject.setVisible(false);
    cbStatusFilter.setVisible(false);

    // ✅ Show leader-only components
    txtLeaderId.setVisible(true);
    txtName.setVisible(true);
    txtDescription.setVisible(true);
    btnCreate.setVisible(true);

    // ✅ Load only leader’s clubs
    loadLeaderClubs(user.getUserId());

    // ✅ Refresh UI
    SwingUtilities.invokeLater(() -> {
        revalidate();
        repaint();
    });
}




            // --------------------------
        // Load table data
        // --------------------------
        private void loadClubs(String filter) {
            DefaultTableModel model = new DefaultTableModel(
                    new Object[]{"ID", "Name", "Description", "Status", "Leader ID"}, 0
            );
            List<Club> clubs = ClubDAO.getAllClubs();

            for (Club c : clubs) {
                if (filter.equals("ALL") || c.getStatus().equalsIgnoreCase(filter)) {
                    model.addRow(new Object[]{
                        c.getClubId(),
                        c.getName(),
                        c.getDescription(),
                        c.getStatus(),
                        c.getLeaderId()
                    });
                }
            }

            tblClubs.setModel(model);
        }
        private void loadLeaderClubs(int leaderId) {
            DefaultTableModel model = new DefaultTableModel(
                    new Object[]{"ID", "Name", "Description", "Status"}, 0
            );
            List<Club> clubs = ClubDAO.getAllClubs();

            for (Club c : clubs) {
                if (c.getLeaderId() == leaderId) {
                    model.addRow(new Object[]{
                        c.getClubId(),
                        c.getName(),
                        c.getDescription(),
                        c.getStatus()
                    });
                }
            }

            tblClubs.setModel(model);
        }

        // --------------------------
        // Reset form fields
        // --------------------------
        private void clearFields() {
            txtName.setText("");
            txtDescription.setText("");
            txtLeaderId.setText("");
            cbStatusFilter.setSelectedIndex(0);
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblDescription = new javax.swing.JLabel();
        txtDescription = new javax.swing.JTextField();
        lblLeader = new javax.swing.JLabel();
        txtLeaderId = new javax.swing.JTextField();
        btnCreate = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblClubs = new javax.swing.JTable();
        btnApprove = new javax.swing.JButton();
        cbStatusFilter = new javax.swing.JComboBox<>();
        btnReject = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblName.setText("Club Name:");

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        lblDescription.setText("Description:");

        lblLeader.setText("Leader ID:");

        btnCreate.setText("Create Club");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh List");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        tblClubs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblClubs);

        btnApprove.setText("Approve");
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });

        cbStatusFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "Pending", "Approved", "Rejected" }));
        cbStatusFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbStatusFilterActionPerformed(evt);
            }
        });

        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                                    .addComponent(lblLeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(26, 26, 26))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtName, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDescription, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtLeaderId))
                                .addGap(10, 10, 10)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbStatusFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(btnCreate)
                .addGap(18, 18, 18)
                .addComponent(btnRefresh)
                .addGap(26, 26, 26)
                .addComponent(btnApprove)
                .addGap(28, 28, 28)
                .addComponent(btnReject)
                .addGap(0, 45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(lblDescription)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblLeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLeaderId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(4, 4, 4)
                .addComponent(cbStatusFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnRefresh)
                    .addComponent(btnApprove)
                    .addComponent(btnReject))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbStatusFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbStatusFilterActionPerformed
        String filter = cbStatusFilter.getSelectedItem().toString();
        loadClubs(filter);
    }//GEN-LAST:event_cbStatusFilterActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
                                             
    String name = txtName.getText().trim();
    String desc = txtDescription.getText().trim();
    String leaderText = txtLeaderId.getText().trim();

    if (name.isEmpty() || desc.isEmpty() || leaderText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "All fields are required!");
        return;
    }

    int leaderId;
    try {
        leaderId = Integer.parseInt(leaderText);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Leader ID must be a number.");
        return;
    }

    // Check if leader already has a club
    List<Club> allClubs = ClubDAO.getAllClubs();
    for (Club c : allClubs) {
        if (c.getLeaderId() == leaderId) {
            JOptionPane.showMessageDialog(this, 
                "You already have a club assigned. Only one club per leader is allowed.");
            btnCreate.setEnabled(false);
            return;
        }
    }

    // Create the new club
    Club club = new Club(0, name, desc, "Pending", leaderId);
    if (ClubDAO.createClub(club)) {
        JOptionPane.showMessageDialog(this, """
                                            Club creation request submitted successfully.
                                            Please wait for admin approval.""");
        dispose(); // Close current form

        // Redirect to Leader Dashboard
        new clubconnect.ui.LeaderDashboard(user).setVisible(true);

    } else {
        JOptionPane.showMessageDialog(this, 
            "Error creating club. It might already exist.");
    }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        loadClubs(cbStatusFilter.getSelectedItem().toString());
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        int selectedRow = tblClubs.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Select a club to approve.");
        return;
    }

    int clubId = (int) tblClubs.getValueAt(selectedRow, 0);
    if (ClubDAO.updateStatus(clubId, "Approved")) {
        JOptionPane.showMessageDialog(this, "Club approved successfully!");
        loadClubs(cbStatusFilter.getSelectedItem().toString());
    } else {
        JOptionPane.showMessageDialog(this, "Error updating club status.");
    }
    }//GEN-LAST:event_btnApproveActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        int selectedRow = tblClubs.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Select a club to reject.");
        return;
    }

    int clubId = (int) tblClubs.getValueAt(selectedRow, 0);
    if (ClubDAO.updateStatus(clubId, "Rejected")) {
        JOptionPane.showMessageDialog(this, "Club rejected successfully!");
        loadClubs(cbStatusFilter.getSelectedItem().toString());
    } else {
        JOptionPane.showMessageDialog(this, "Error updating club status.");
    }
    }//GEN-LAST:event_btnRejectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClubForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClubForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClubForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClubForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClubForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnReject;
    private javax.swing.JComboBox<String> cbStatusFilter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblLeader;
    private javax.swing.JLabel lblName;
    private javax.swing.JTable tblClubs;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextField txtLeaderId;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
